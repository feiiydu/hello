{"version":3,"sources":["reportWebVitals.js","components/FormTodo.js","Todo.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","FormTodo","tasks","state","task","message","doPrintingT","doPrinting","bind","event","this","setState","target","value","remaining","forEach","isDone","console","log","push","id","length","CheckRemaining","all","toString","document","getElementById","style","textDecoration","data","map","onClick","ClickTask","type","onKeyUp","AddTask","Component","Todo","addNewTask","input","ReactDOM","render","StrictMode"],"mappings":"oLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,kDCqECQ,E,kDAtEX,aAAc,IAAD,8BACT,gBAFJC,MAAQ,GAGJ,EAAKC,MAAQ,CAACC,KAAM,GAAGC,QAAS,8BAChC,EAAKC,YAAc,EAAKC,WAAWC,KAAhB,gBAHV,E,8CAMb,SAAWC,GACPC,KAAKC,SAAS,CAACP,KAAOK,EAAMG,OAAOC,U,4BAGvC,WACI,IAAIC,EAAY,EAMhB,OALAJ,KAAKR,MAAMa,SAAQ,SAAAX,GACVA,EAAKY,QACNF,OAGDA,I,qBAGX,WACIG,QAAQC,IAAI,kBACZD,QAAQC,IAAIR,KAAKP,MAAMC,MACvBM,KAAKR,MAAMiB,KAAK,CAACC,GAAIV,KAAKR,MAAMmB,OAAO,EAAEjB,KAAKM,KAAKP,MAAMC,KAAKY,QAAO,IACrEC,QAAQC,IAAIR,KAAKR,OACjB,IAAIY,EAAYJ,KAAKY,iBACjBC,EAAOb,KAAKR,MAAMmB,OAAQG,WAC9BP,QAAQC,IAAIJ,EAAYS,GACxBb,KAAKC,SAAS,CAACN,QAAQS,EAAW,qBAAqBS,EAAI,WAC3DE,SAASC,eAAe,cAAcb,MAAQ,K,uBAGlD,SAAUT,GACFA,EAAKY,OACLS,SAASC,eAAetB,EAAKgB,IAAIO,MAAMC,eAAiB,OAExDH,SAASC,eAAetB,EAAKgB,IAAIO,MAAMC,eAAiB,eAE5DxB,EAAKY,QAAUZ,EAAKY,OACpB,IAAIF,EAAYJ,KAAKY,iBACjBC,EAAOb,KAAKR,MAAMmB,OAAQG,WAC9Bd,KAAKC,SAAS,CAACN,QAAQS,EAAW,qBAAqBS,EAAI,a,oBAI/D,WAAU,IAAD,OACCM,EAAOnB,KAAKR,MAAM4B,KAAI,SAAC1B,GAAD,OACxB,aADoC,CACpC,MAAI2B,QAAS,kBAAM,EAAKC,UAAU5B,IAAqBgB,GAAIhB,EAAKgB,GAAhE,SACMhB,EAAKA,MADmCA,EAAKgB,OAKvD,OACI,gCACI,uBACA,uBACIA,GAAG,aACHa,KAAK,OACLC,QAASxB,KAAKJ,cAElB,wBAAQyB,QAAS,kBAAM,EAAKI,WAA5B,iBACA,4BAAIzB,KAAKP,MAAME,UACf,6BAAKwB,W,GAjEEO,aCsBRC,E,kDAnBX,aAAe,IAAD,8BACV,gBACKlC,MAAQ,CAACC,KAAK,GAAGC,QAAS,IAC/B,EAAKiC,WAAa,EAAKA,WAAW9B,KAAhB,gBAHR,E,8CAMd,SAAW+B,GACP7B,KAAKC,SAAS,CAACP,KAAMmC,EAAMlC,QAAQK,KAAKP,MAAME,Y,oBAGlD,WACI,OACI,8BACI,cAAC,EAAD,U,GAhBG+B,aCGnBI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjB,SAASC,eAAe,SAM1BlC,M","file":"static/js/main.c2e024f9.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Component } from \"react\";\nimport '../App.css';\n\nclass FormTodo extends Component {\n\n    tasks = []\n    constructor(){\n        super();\n        this.state = {task: \"\",message: \"0 remaining out of 0 tasks\"};\n        this.doPrintingT = this.doPrinting.bind(this);\n    }\n\n    doPrinting(event) {\n        this.setState({task : event.target.value});\n    }\n\n    CheckRemaining() {\n        var remaining = 0\n        this.tasks.forEach(task => {\n            if (!task.isDone) {\n                remaining++\n            }\n        });\n        return remaining\n    }\n\n    AddTask() {\n        console.log(\"Click add task\")\n        console.log(this.state.task)\n        this.tasks.push({id: this.tasks.length+1,task:this.state.task,isDone:false})\n        console.log(this.tasks)\n        var remaining = this.CheckRemaining()\n        var all = (this.tasks.length).toString()\n        console.log(remaining , all)\n        this.setState({message:remaining +\" remaining out of \"+all+\" tasks\"})\n        document.getElementById(\"text-field\").value = \"\"\n    }\n\n    ClickTask(task) {\n        if (task.isDone) {\n            document.getElementById(task.id).style.textDecoration = \"none\" \n        } else {\n            document.getElementById(task.id).style.textDecoration = \"line-through\"\n        }\n        task.isDone = !task.isDone\n        var remaining = this.CheckRemaining()\n        var all = (this.tasks.length).toString()\n        this.setState({message:remaining +\" remaining out of \"+all+\" tasks\"})\n    }\n    //className=\"Normal-Text\"\n\n    render() {\n        const data = this.tasks.map((task) => ( //loop for each put in 'data'\n            <li onClick={() => this.ClickTask(task)} key={task.id} id={task.id} >\n                { task.task }\n            </li>\n            \n        ));\n        return (\n            <div>\n                <br/>\n                <input \n                    id=\"text-field\"\n                    type=\"text\" \n                    onKeyUp={this.doPrintingT} \n                />\n                <button onClick={() => this.AddTask()}>Add</button>\n                <p>{this.state.message}</p>\n                <ul>{data}</ul>\n            </div>  \n        );\n    }\n\n}\n\n\nexport default FormTodo;","import { Component } from \"react\";\nimport FormTodo from \"./components/FormTodo\";\n\nclass Todo extends Component {\n\n\n    constructor() {\n        super()\n        this.state = {task:\"\",message: \"\"};\n        this.addNewTask = this.addNewTask.bind(this);\n    };\n\n    addNewTask(input) {\n        this.setState({task: input,message:this.state.message})\n    };\n\n    render() {\n        return (\n            <div>\n                <FormTodo />\n            </div>\n        );\n    }\n}\n\nexport default Todo;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Todo from './Todo';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Todo />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}