{"version":3,"sources":["components/FormTodo.js","Todo.js","reportWebVitals.js","index.js"],"names":["FormTodo","tasks","state","task","message","doPrintingT","doPrinting","bind","event","this","setState","target","value","remaining","forEach","isDone","console","log","push","id","length","CheckRemaining","all","toString","data","map","type","onKeyUp","onClick","AddTask","Component","Todo","addNewTask","input","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPA8DeA,E,kDAxDX,aAAc,IAAD,8BACT,gBAFJC,MAAQ,GAGJ,EAAKC,MAAQ,CAACC,KAAM,GAAGC,QAAS,8BAChC,EAAKC,YAAc,EAAKC,WAAWC,KAAhB,gBAHV,E,8CAMb,SAAWC,GACPC,KAAKC,SAAS,CAACP,KAAOK,EAAMG,OAAOC,U,4BAGvC,WACI,IAAIC,EAAY,EAMhB,OALAJ,KAAKR,MAAMa,SAAQ,SAAAX,GACVA,EAAKY,QACNF,OAGDA,I,qBAGX,SAAQL,GACJQ,QAAQC,IAAI,kBACZD,QAAQC,IAAIR,KAAKP,MAAMC,MACvBM,KAAKR,MAAMiB,KAAK,CAACC,GAAIV,KAAKR,MAAMmB,OAAO,EAAEjB,KAAKM,KAAKP,MAAMC,KAAKY,QAAO,IACrEC,QAAQC,IAAIR,KAAKR,OACjB,IAAIY,EAAYJ,KAAKY,iBACjBC,EAAOb,KAAKR,MAAMmB,OAAQG,WAC9BP,QAAQC,IAAIJ,EAAYS,GACxBb,KAAKC,SAAS,CAACN,QAAQS,EAAW,qBAAqBS,EAAI,a,oBAG/D,WAAU,IAAD,OACCE,EAAOf,KAAKR,MAAMwB,KAAI,SAACtB,GAAD,OACxB,aADoC,CACpC,eACMA,EAAKA,MADFA,EAAKgB,OAKlB,OACI,gCACI,uBACA,uBACIA,GAAG,aACHO,KAAK,OACLC,QAASlB,KAAKJ,cAElB,wBAAQuB,QAAS,kBAAM,EAAKC,WAA5B,iBACA,4BAAIpB,KAAKP,MAAME,UACf,6BAAKoB,W,GAnDEM,aCsBRC,E,kDAnBX,aAAe,IAAD,8BACV,gBACK7B,MAAQ,CAACC,KAAK,GAAGC,QAAS,IAC/B,EAAK4B,WAAa,EAAKA,WAAWzB,KAAhB,gBAHR,E,8CAMd,SAAW0B,GACPxB,KAAKC,SAAS,CAACP,KAAM8B,EAAM7B,QAAQK,KAAKP,MAAME,Y,oBAGlD,WACI,OACI,8BACI,cAAC,EAAD,U,GAhBG0B,aCSJI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.5b55ea3f.chunk.js","sourcesContent":["import { clean } from \"gh-pages\";\nimport { Component } from \"react\";\n\nclass FormTodo extends Component {\n\n    tasks = []\n    constructor(){\n        super();\n        this.state = {task: \"\",message: \"0 remaining out of 0 tasks\"};\n        this.doPrintingT = this.doPrinting.bind(this);\n    }\n\n    doPrinting(event) {\n        this.setState({task : event.target.value});\n    }\n\n    CheckRemaining() {\n        var remaining = 0\n        this.tasks.forEach(task => {\n            if (!task.isDone) {\n                remaining++\n            }\n        });\n        return remaining\n    }\n\n    AddTask(event) {\n        console.log(\"Click add task\")\n        console.log(this.state.task)\n        this.tasks.push({id: this.tasks.length+1,task:this.state.task,isDone:false})\n        console.log(this.tasks)\n        var remaining = this.CheckRemaining()\n        var all = (this.tasks.length).toString()\n        console.log(remaining , all)\n        this.setState({message:remaining +\" remaining out of \"+all+\" tasks\"})\n    }\n\n    render() {\n        const data = this.tasks.map((task) => ( //loop for each put in 'data'\n            <li key={task.id}>\n                { task.task }\n            </li>\n            \n        ));\n        return (\n            <div>\n                <br/>\n                <input \n                    id=\"text-field\"\n                    type=\"text\" \n                    onKeyUp={this.doPrintingT} \n                />\n                <button onClick={() => this.AddTask()}>Add</button>\n                <p>{this.state.message}</p>\n                <ul>{data}</ul>\n            </div>  \n        );\n    }\n\n}\n\n\nexport default FormTodo;","import { Component } from \"react\";\nimport FormTodo from \"./components/FormTodo\";\n\nclass Todo extends Component {\n\n\n    constructor() {\n        super()\n        this.state = {task:\"\",message: \"\"};\n        this.addNewTask = this.addNewTask.bind(this);\n    };\n\n    addNewTask(input) {\n        this.setState({task: input,message:this.state.message})\n    };\n\n    render() {\n        return (\n            <div>\n                <FormTodo />\n            </div>\n        );\n    }\n}\n\nexport default Todo;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todo from './Todo';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Todo />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}